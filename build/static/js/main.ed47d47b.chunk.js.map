{"version":3,"sources":["components/Form.jsx","Validation.js","App.js","serviceWorker.js","index.js"],"names":["Form","state","ErrorMessage","NameBool","EmailBool","messageBool","btnDisabled","this","className","noValidate","autoComplete","Grid","container","direction","justify","alignItems","spacing","item","xs","FormHelperText","TextField","id","label","onChange","error","Name","Message","bool","length","ValidateName","document","querySelector","value","setState","type","email","ValidateEmail","TextareaAutosize","aria-label","placeholder","rowsMin","message","ValidateMessage","Button","variant","color","onClick","disabled","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"uUAwEeA,G,gEAjEd,aAAgB,IAAD,8BACd,gBACKC,MAAQ,CACZC,aAAe,GACfC,UAAe,EACfC,WAAe,EACfC,aAAe,GANF,E,qDASJ,IAAD,OACLC,GAAc,EAIlB,OAHKC,KAAKN,MAAME,UAAaI,KAAKN,MAAMG,YACvCE,GAAc,GAGd,yBAAKE,UAAU,iBACd,0BAAMA,UAAU,OAAOC,YAAU,EAACC,aAAa,OAC9C,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAU,SAASC,QAAQ,aAAaC,WAAW,SAASC,QAAS,GACpF,kBAACL,EAAA,EAAD,CAAMC,WAAS,EAACK,MAAI,EAACC,GAAI,EAAGH,WAAW,UACrCR,KAAKN,MAAME,UAAY,kBAACgB,EAAA,EAAD,KAAiBZ,KAAKN,MAAMC,cACpD,kBAACkB,EAAA,EAAD,CACCC,GAAG,OACHC,MAAM,OACNC,SAAU,WACT,IAAMC,EC/Ba,SAACC,GAC5B,IAAMC,EAAU,CACfxB,aAAe,GACfyB,MAAe,GAOhB,OAJoB,IAAhBF,EAAKG,SACRF,EAAQxB,aAAe,oBACvBwB,EAAQC,MAAO,GAETD,EDqBeG,CAAaC,SAASC,cAAc,SAASC,OAC3D,EAAKC,SAAS,CAAE/B,aAAcsB,EAAMtB,aAAcC,SAAUqB,EAAMG,WAIrE,kBAAChB,EAAA,EAAD,CAAMC,WAAS,EAACK,MAAI,EAACC,GAAI,EAAGH,WAAW,UACrCR,KAAKN,MAAMG,WAAa,kBAACe,EAAA,EAAD,KAAiBZ,KAAKN,MAAMC,cACrD,kBAACkB,EAAA,EAAD,CACCC,GAAG,QACHC,MAAM,QACNY,KAAK,QACLX,SAAU,WACT,IAAMC,EC/Bc,SAACW,GAC7B,IAAMT,EAAU,CACfxB,aAAe,GACfyB,MAAe,GAOhB,OAJqB,IAAjBQ,EAAMP,SACTF,EAAQxB,aAAe,qBACvBwB,EAAQC,MAAO,GAETD,EDqBeU,CAAcN,SAASC,cAAc,UAAUC,OAC7D,EAAKC,SAAS,CAAE/B,aAAcsB,EAAMtB,aAAcE,UAAWoB,EAAMG,WAItE,kBAAChB,EAAA,EAAD,CAAMC,WAAS,EAACK,MAAI,EAACC,GAAI,EAAGH,WAAW,UACrCR,KAAKN,MAAMI,aAAe,kBAACc,EAAA,EAAD,KAAiBZ,KAAKN,MAAMC,cACvD,kBAACmC,EAAA,EAAD,CACChB,GAAG,UACHiB,aAAW,iBACXC,YAAY,UACZC,QAAQ,KACRjB,SAAU,WACT,IAAMC,EC/BgB,SAACiB,GAC/B,IAAMf,EAAU,CACfxB,aAAe,GACfyB,MAAe,GAOhB,OAJuB,IAAnBc,EAAQb,SACXF,EAAQxB,aAAe,uBACvBwB,EAAQC,MAAO,GAETD,EDqBegB,CAAgBZ,SAASC,cAAc,YAAYC,OACjE,EAAKC,SAAS,CAAE/B,aAAcsB,EAAMtB,aAAcG,YAAamB,EAAMG,WAKxE,kBAACgB,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,QAAS,aAAUC,SAAUzC,GAAzE,e,GAxDa0C,IAAMC,Y,OEMVC,MARf,WACC,OACC,yBAAK1C,UAAU,OACd,kBAAC,EAAD,QCKiB2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5B,SAAS6B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1C,GACL2C,QAAQ3C,MAAMA,EAAMiB,c","file":"static/js/main.ed47d47b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { TextField, Grid, TextareaAutosize, Button, FormHelperText } from '@material-ui/core/';\r\nimport { ValidateName, ValidateEmail, ValidateMessage } from '../Validation';\r\nimport './Form-style.css';\r\nimport { render } from '@testing-library/react';\r\n\r\nclass Form extends React.Component {\r\n\tconstructor () {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\tErrorMessage : '',\r\n\t\t\tNameBool     : false,\r\n\t\t\tEmailBool    : false,\r\n\t\t\tmessageBool  : false\r\n\t\t};\r\n\t}\r\n\trender () {\r\n\t\tlet btnDisabled = true;\r\n\t\tif (!this.state.NameBool && !this.state.EmailBool) {\r\n\t\t\tbtnDisabled = false;\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div className='FormContainer'>\r\n\t\t\t\t<form className='form' noValidate autoComplete='off'>\r\n\t\t\t\t\t<Grid container direction='column' justify='flex-start' alignItems='center' spacing={4}>\r\n\t\t\t\t\t\t<Grid container item xs={6} alignItems='center'>\r\n\t\t\t\t\t\t\t{this.state.NameBool && <FormHelperText>{this.state.ErrorMessage}</FormHelperText>}\r\n\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\tid='Name'\r\n\t\t\t\t\t\t\t\tlabel='Name'\r\n\t\t\t\t\t\t\t\tonChange={() => {\r\n\t\t\t\t\t\t\t\t\tconst error = ValidateName(document.querySelector('#Name').value);\r\n\t\t\t\t\t\t\t\t\tthis.setState({ ErrorMessage: error.ErrorMessage, NameBool: error.bool });\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid container item xs={6} alignItems='center'>\r\n\t\t\t\t\t\t\t{this.state.EmailBool && <FormHelperText>{this.state.ErrorMessage}</FormHelperText>}\r\n\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\tid='Email'\r\n\t\t\t\t\t\t\t\tlabel='Email'\r\n\t\t\t\t\t\t\t\ttype='email'\r\n\t\t\t\t\t\t\t\tonChange={() => {\r\n\t\t\t\t\t\t\t\t\tconst error = ValidateEmail(document.querySelector('#Email').value);\r\n\t\t\t\t\t\t\t\t\tthis.setState({ ErrorMessage: error.ErrorMessage, EmailBool: error.bool });\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid container item xs={6} alignItems='center'>\r\n\t\t\t\t\t\t\t{this.state.messageBool && <FormHelperText>{this.state.ErrorMessage}</FormHelperText>}\r\n\t\t\t\t\t\t\t<TextareaAutosize\r\n\t\t\t\t\t\t\t\tid='Message'\r\n\t\t\t\t\t\t\t\taria-label='empty textarea'\r\n\t\t\t\t\t\t\t\tplaceholder='Message'\r\n\t\t\t\t\t\t\t\trowsMin='10'\r\n\t\t\t\t\t\t\t\tonChange={() => {\r\n\t\t\t\t\t\t\t\t\tconst error = ValidateMessage(document.querySelector('#Message').value);\r\n\t\t\t\t\t\t\t\t\tthis.setState({ ErrorMessage: error.ErrorMessage, messageBool: error.bool });\r\n\t\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</Grid>\r\n\r\n\t\t\t\t\t\t<Button variant='contained' color='primary' onClick={() => {}} disabled={btnDisabled}>\r\n\t\t\t\t\t\t\tSend\r\n\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Form;\r\n","export const ValidateName = (Name) => {\r\n\tconst Message = {\r\n\t\tErrorMessage : '',\r\n\t\tbool         : false\r\n\t};\r\n\r\n\tif (Name.length === 0) {\r\n\t\tMessage.ErrorMessage = 'Please Enter Name';\r\n\t\tMessage.bool = true;\r\n\t}\r\n\treturn Message;\r\n};\r\nexport const ValidateEmail = (email) => {\r\n\tconst Message = {\r\n\t\tErrorMessage : '',\r\n\t\tbool         : false\r\n\t};\r\n\r\n\tif (email.length === 0) {\r\n\t\tMessage.ErrorMessage = 'Please Enter Email';\r\n\t\tMessage.bool = true;\r\n\t}\r\n\treturn Message;\r\n};\r\n\r\nexport const ValidateMessage = (message) => {\r\n\tconst Message = {\r\n\t\tErrorMessage : '',\r\n\t\tbool         : false\r\n\t};\r\n\r\n\tif (message.length === 0) {\r\n\t\tMessage.ErrorMessage = 'Please Enter Message';\r\n\t\tMessage.bool = true;\r\n\t}\r\n\treturn Message;\r\n};\r\n","import React from 'react';\nimport Form from './components/Form';\nimport './App.css';\n\nfunction App (){\n\treturn (\n\t\t<div className='App'>\n\t\t\t<Form />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}